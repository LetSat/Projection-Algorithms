Lat/Long Projection Algorithms Documentation
Release 0.2
Created: 2/14/18
Brian Howell

General:

All Vectors are represented in [x,y,z] format with the origin at the center of the Earth (CE). The
positive side of the X axis passes through point Lat:0, Long:0. The positive side of the Y axis 
passes through point Lat:0, Long:90. The positive side of the Z axis passes through point Lat:90.
All magnitudes are in km.

For the purposes of this algorithm, the Earth is assumed to be a perfect sphere with radius 6371.0 km
The Earth is technically not a perfect sphere, but it is close. Further reading:
https://www.quora.com/Why-does-planet-earth-looks-like-a-perfect-sphere-in-NASA-pictures-Is-it-possible-for-any-object-with-below-physical-characteristics-to-be-in-perfect-shape

###################################################################################################
polarDistance
###################################################################################################

polarDistance finds the distance between a point representing the center of the image on the
surface of the Earth and another arbitrary point on the surface of the Earth. The difference of
these points is represented by a polar vector from the center point (CP) to the given point (GP).

polarDistance finds the vector between the CP and the GP in 3D space, then projects that vector
onto the viewing plane (VP). The VP is the plane orthogonal to the vector between the CP and the
camera. It compares this projected vector to the vector from CE to the point Lat:90 in order to 
determine the angle of the final polar vector. The projected vector using Lat:90 serves as the 90Â°
line for the polar vector, so it finds the angle of the final polar vector using that as reference.
To find magnitude, it first finds the viewAngle, which is the angle from the camera lens to the 
edge of what the camera can see in the image based on altitude. It then finds the pointAngle, which
is the angle from the camera lens to the GP. By comparing these two angles, it calculates the 
magnitude of the final polar vector.

Parameters:
	plat - The latitude of the GP (-90 to 90)
	plong - The longitude of the GP (-180 to 180)
	positionData - A list of values calculated for a particular image center and camera altitude:
		[0] - Vector from CE to CP
		[1] - Vector from CP to camera
		[2] - ViewAngle: Angle describing field of view of the camera on Earth surface
		[3] - Vector from CE to LAT 90 projected onto "viewing plane"
		[4] - Lat/Long coordinates of the northern edge of the view
		
The data used in the positionData parameter can be obtained from the prePolarDistance function.
It is the responsibility of the user to first use this function before using the polarDistance
function repeatedly on a set of data. This is useful to avoid recalculating values that only
depend on the position of the CP and the altitude of the camera.

prePolarDistance Parameters:
	alt - The altitude of the camera in km
	clat - The latitude of the CP (-90 to 90)
	clong - The longitude of the CP (-180 to 180)

Return:
	A list of values needed in the polarDistance function:
		[0] - Vector from CE to CP
		[1] - Vector from CP to camera
		[2] - ViewAngle: Angle describing field of view of the camera on Earth surface
		[3] - Vector from CE to LAT 90 projected onto "viewing plane"
		[4] - Lat/Long coordinates of the northern edge of the view
		

Functions used by polarDistance:

pointVector
Finds the 3D vector between CE and a point on Earth's surface
Parameters:
	lat - Latitude of the point
	long - Longitude of the point
Returns:
	Vector from CE to the point
	
addVectors
Finds result of vectorA + vectorB. Both Vectors are in [x,y,z] form
	vectorA - Vector to be added
	vectorB - Vector to be added
Returns:
	Vector result of addition
	
diffVectors
Finds result of vectorA - vectorB. Both Vectors are in [x,y,z] form
Parameters:
	vectorA - Vector to be subtracted from
	vectorB - Vector to subtracted
Returns:
	Vector result of subtraction
	
centerCamVector
Finds the vector from CP to the camera
Parameters:
	alt - Altitude of camera in km
	earthToCenter - Vector from CE to CP
Returns:
	Vector from CP to camera

vectorMagnitude
Finds the magnitude of a vector
Parameters:
	vector - Vector to find the magnitude of
Returns:
	Magnitude of the vector

vectorAngleSimple
Finds the angle between two vectors
Parameters:
	vectorA - Vector used to find angle
	vectorB - Other vector used to find angle
Returns:
	Angle between the two vectors (radians)

crossProduct
Finds the cross product of two vectors
Parameters:
	a - Vector used in cross product calculation
	b - Vector used in cross product calculation
Returns:
	Cross product of the two vectors ([x,y,z])

viewAngle (also used in latLong)
Finds the angle that the camera can see from the lens to the edge of the camera view on the surface
of the Earth
Parameters:
	alt - Altitude of the camera (km)
Returns:
	The viewAngle (radians)
	
projectVectorToPlane
Projects a vector onto a plane described by its normal vector
Parameters:
	centerNorm - Normal vector of the plane
	point - Vector to project                                                                                      //TODO: Change this parameter name
Returns:
	Projected vector result

getPointAngle                                                                                                      //TODO: Explain this
Finds the angle used for the final polar vector
Parameters:
	vectorA - 
	vectorB - 
	planeNorm - 
Returns:
	Angle of final polar vector (radians)


###################################################################################################
latLong
###################################################################################################

latLong finds the latitude and longitude of a point in an image of the Earth. 
latLong is given the latitude and longitude of the center point (CP) in the image, the polar vector
from the center to the given point (GP), and the altitude of the camera. It first finds the view 
angle using the altitude of the camera. The view angle is the angle between the camera and the edge
of the surface of the Earth that the camera can see. It then finds the point angle using the
magnitude of the polar vector. This is the angle between the camera and the GP. It then finds the X
coordinate of the GP in 3D space referenced with the CP X coordinate at 0. It then finds the Y
coordinate of the GP. It then rotates the vector [GP_X, GP_Y, 0] about the X axis by the angle of
the polar Vector. It then rotates the result about the Y axis by the latitude of the CP * -1. It
then rotates that result about the Z axis by the longitude of the CP. This final vector now points
from CE to the GP in 3D space. It then finds the latitude and longitude of the GP from this vector.

Parameters:
	pmag - Magnitude of the polar vector (0 <= pmag < 1)
	pang - Angle of the polar vector (degrees)
	positionData - A list of values calculated for a particular image center and camera altitude:
		[0] - ViewAngle: Angle describing field of view of the camera on Earth surface
		[1] - Altitude of camera
		[2] - Latitude of CP
		[3] - Longitude of CP
	
The data used in the positionData parameter can be obtained from the preLatLong function.
It is the responsibility of the user to first use this function before using the latLong
function repeatedly on a set of data. This is useful to avoid recalculating values that only
depend on the position of the CP and the altitude of the camera.

prePolarDistance Parameters:
	alt - The altitude of the camera in km
	clat - The latitude of the CP (-90 to 90)
	clong - The longitude of the CP (-180 to 180)

Return:
	A list of values needed in the polarDistance function:
		[0] - ViewAngle: Angle describing field of view of the camera on Earth surface
		[1] - Altitude of camera
		[2] - Latitude of CP
		[3] - Longitude of CP
		
Functions used by latLong:

viewAngle (also used in polarDistance)
Finds the angle that the camera can see from the lens to the edge of the camera view on the surface
of the Earth
Parameters:
	alt - Altitude of the camera (km)
Returns:
	The viewAngle (radians)

xCoord
Finds the X coordinate in 3D space of the GP using CP as zero reference.
Parameters:
	alt - altitude of the camera
	pA - pointAngle; the angle between the camera and the GP
Returns:
	X coordinate of the GP

rotateVectorX
Rotates a vector around the X axis
Parameters:
	vector - Vector to be rotated
	angle - Angle to rotate by (radians)
Returns:
	Rotated vector

rotateVectorY
Rotates a vector around the Y axis
Parameters:
	vector - Vector to be rotated
	angle - Angle to rotate by (radians)
Returns:
	Rotated vector

rotateVectorZ
Rotates a vector around the Z axis
Parameters:
	vector - Vector to be rotated
	angle - Angle to rotate by (radians)
Returns:
	Rotated vector

vectorToLatLong
Converts a vector from CE to a point on Earth's surface to the points latitude and longitude
coordinates
Parameters:
	vector - Vector from CE to Earth's surface
Returns:
	List containing latitude and longitude of the point ([lat, long])

	
	
	
	
Other generic functions used:

crossProduct
Takes the cross product of two vectors [x,y,z]
Parameters:
	vectorA - Vector used in cross product
	vectorB - Vector used in cross product
Returns:
	Vector result of cross product ([x,y,z])
	
dotProduct
Takes the dot product of two vectors [x,y,z]
Parameters:
	vectorA - Vector used in dot product
	vectorB - Vector used in dot product
Returns:
	Result of dot product

unitVector
Returns the unit vector of the given vector
Parameters:
	a - vector describing direction                                                                    //TODO: Rename?
Returns:
	Unit vector of the given vector
	
vectorMagnitude
Finds the magnitude of the given vector
Parameters:
	vector - Vector to find the magnitude of
Returns:
	Magnitude of the vector





























